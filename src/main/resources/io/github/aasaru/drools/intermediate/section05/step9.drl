package io.github.aasaru.drools.intermediate.section05.step9

import io.github.aasaru.drools.intermediate.domain.cep.Agent;
import io.github.aasaru.drools.intermediate.domain.cep.Call;
import io.github.aasaru.drools.intermediate.domain.cep.TimeWaitedJavaPojo;
import io.github.aasaru.drools.intermediate.service.CallService;
import io.github.aasaru.drools.intermediate.service.AgentService;

import java.util.List;

global CallService callService;
global AgentService agentService;

declare TimeWaitedJavaPojo
	@role( event )
end

rule "Connect an agent with a suitable call that has earliest start"
	dialect "java"
	when
		$agent: Agent()
		$callToPickUp: Call( $agent.speaks(this.language) )
		forall (
			$candidateCall : Call( $agent.speaks(this.language) ),
			Call( this == $candidateCall, this.callStart >= $callToPickUp.callStart )
		)
	then
		callService.connectWithAgent($callToPickUp, $agent);
		delete($agent);
		delete($callToPickUp);
		TimeWaitedJavaPojo timeWaited = new TimeWaitedJavaPojo($callToPickUp.getTimeWaited());
		callService.reportMessage("INSERTING " + timeWaited);
		insert(timeWaited);
end

rule "Output queue size and wait time"
	dialect "java"
	salience 100
	// repeat every 1 second with initial delay of 0 seconds
	timer ( int: 0s 1s )
	when
		$queue : List() from collect( Call() )

		$averageWaitTime: Double() from accumulate(
			TimeWaitedJavaPojo($waitTime : time) over window:length(3),
		average($waitTime))
	then
		callService.reportQueueSizeAndWaitTime( $queue.size(), $averageWaitTime );
end
