package io.github.aasaru.drools.intermediate.section06.step3

import io.github.aasaru.drools.intermediate.domain.cep.Agent;
import io.github.aasaru.drools.intermediate.domain.cep.Call;
import io.github.aasaru.drools.intermediate.service.CallService;
import io.github.aasaru.drools.intermediate.service.AgentService;

global CallService callService;
global AgentService agentService;

rule "Report average and max customer value"
	dialect "mvel"
	salience 100
	when
		accumulate(
			Call(customerValue > 0, $customerValue : customerValue);
			$maxCustomerValueInQueue : max( $customerValue ),
			$averageCustomerValueInQueue : average( $customerValue )
		)
		// TODO custom function could just return the customers elegible

	then
		System.out.println("Average customer value " + $averageCustomerValueInQueue + " and max: " + $maxCustomerValueInQueue);
end

rule "Connect a customer whose value is more than two times higher"
	dialect "mvel"

	when
		accumulate(
			Call(customerValue > 0, $customerValue : customerValue);
			$maxCustomerValueInQueue : max( $customerValue ),
			$averageCustomerValueInQueue : average( $customerValue );
			$maxCustomerValueInQueue > 2 * $averageCustomerValueInQueue
		)
		$agent: Agent()
		$call: Call(customerValue > 2 * $averageCustomerValueInQueue, $agent.speaks(this.language))
	then
		callService.connectWithAgent($call, $agent);
		delete($call);
end
