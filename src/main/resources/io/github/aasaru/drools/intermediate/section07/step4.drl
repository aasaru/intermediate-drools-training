package io.github.aasaru.drools.intermediate.section07.step4

import java.util.Set;

import io.github.aasaru.drools.intermediate.domain.cep.Agent;
import io.github.aasaru.drools.intermediate.domain.cep.Call;

import io.github.aasaru.drools.intermediate.service.CallService;
import io.github.aasaru.drools.intermediate.service.AgentService;
global CallService callService;
global AgentService agentService;

rule "Report average customer value"
	dialect "mvel"
	salience 100
	when

		// TODO allpool me seda juba demonstreerime
		$averageCustomerValueInQueue : Number() from accumulate(
			Call(customerValue > 0, $customerValue : customerValue),
			average( $customerValue )
		)
		// TODO custom function could just return the customers elegible

	then
		System.out.println("Average customer value " + $averageCustomerValueInQueue);
end

// todo collectList
rule "Connect a customer whose value is more than two times higher"
	dialect "mvel"

	when
		accumulate(
			Call(customerValue > 0, $customerValue : customerValue);
			$maxCustomerValueInQueue : max( $customerValue ),
			$averageCustomerValueInQueue : average( $customerValue );
			$maxCustomerValueInQueue > 2 * $averageCustomerValueInQueue
		)
		$agent: Agent()
		$call: Call(customerValue > 2 * $averageCustomerValueInQueue, $agent.speaks(this.language))
	then
		callService.connectWithAgent($call, $agent);
		delete($call);
end


rule "Report calls"
	dialect "mvel"
	salience 50
	when

		// calculate average
		$averageCustomerValueInQueue : Double() from accumulate(
            Call(customerValue > 0, $customerValue : customerValue),
            average( $customerValue )
        )

		// calculate sum and count for each above twice as average
		accumulate(
			$call: Call(customerValue > $averageCustomerValueInQueue * 2, $customerValue : customerValue);
			$extraValuableCustomersSum : sum( $customerValue ),
			$extraValuableCustomerCount : count( $call ),
			$calls : collectList( $call );
			$extraValuableCustomerCount > 0
		)

		// TODO call-i saaks from-iga võtta ja agendiga paaritada

		// TODO testandmed ümber teha nii, et korraga mätsiks rohkem kui 1

		//$agent: Agent()
		//$call: Call(customerValue > 2 * $averageCustomerValueInQueue, $agent.speaks(this.language))
	then
		System.out.println("There are " + $extraValuableCustomerCount + " valuable calls with total value of " + $extraValuableCustomersSum);

		//callService.connectWithAgent($call, $agent);
		//delete($call);
end